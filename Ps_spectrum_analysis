import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import curve_fit
from scipy.integrate import quad
import csv
import pandas

def gaussian_func(x, A, mu, sigma, a, b):
    return A * np.exp( - (x - mu)**2 / (2 * sigma**2))+a*x+b

def chi2red(hist,binc,err_hist,*p):
    chi2=sum(((hist - gaussian_func(binc,*p) )/ err_hist) ** 2)
    dof=len(binc)-5
    return round(chi2/dof,2)
    
    
 data= pd.read_csv('Ortho_120_120Close.txt',delimiter="\t",names = ['t1','E1','t2','E2','t3','E3','t4','E4'])

##cuting the last acquisition hour because of Gilles

#data=data.loc[data['t1']<(max(np.array(data['t1']))-3600*10**9),:]
print(data)

Channel=['ch1', 'ch2', 'ch3']
Title =['Channel 1: BERNA', 'Channel 2: DEMO', 'Channel 3: BACK']
coeff = [495.3662907422378, 499.20938900287547,457.96722725099886]
En=['E1','E2','E3']
teta12,teta13,teta23= np.radians(120),np.radians(120),np.radians(120)

for k,el in enumerate(En):
    data[el]=data[el]/coeff[k]

plt.figure(1,figsize=(16,10))
plt.hist(data['E1'],bins=500,label=Title[0])
plt.hist(data['E2'],alpha=0.5,bins=500,label=Title[1])
plt.hist(data['E3'],alpha=0.5,bins=500,label=Title[2])

plt.legend(bbox_to_anchor=(0.987, 0.982), loc=1, borderaxespad=0.)
plt.title('Histograms for each channels \n (559968 events) ',fontsize=17)
plt.xlabel('keV',fontsize=17)
plt.ylabel('Count of photons',fontsize=17)
plt.savefig('hist_Ortho_Ps_close')

'''SELECTION'''
conf=[3,3] ##Econf,tconf]     the number of sigma you take for your selection
#time selection
selection_t12=(abs(data['t1']-data['t2']-37.32)<conf[1]*11.75) ### these are the values we found from the time window analysis
selection_t23=(abs(data['t2']-data['t3']-34.88)<conf[1]*12.18) 
selection_t14=(abs(data['t1']-data['t4']-288.20)<conf[1]*8.20) ### these are the values we found from the time window analysis
selection_t24=(abs(data['t2']-data['t4']-319.64)<conf[1]*11.68) 

##Energy selection
Delta_E=conf[0]*30 ##kev approximatively 3*sigma of the 511 pic fit, we can verify at the end with the width we will find if it is coherent
Delta_E4=conf[0]*46
 
 
selection_Etot=((data['E1']+data['E2']+data['E3'])<(1022+Delta_E))&((data['E1']+data['E2']+data['E3'])>(1022-Delta_E)) ##total E around 1022kev here we should take the 3*width of the photopic 

selection_teta12=((data['E1']**2+data['E2']**2+2*data['E1']*data['E2']*np.cos(teta12))<(data['E3']+Delta_E)**2) & ((data['E1']**2+data['E2']**2+2*data['E1']*data['E2']*np.cos(teta12))>(data['E3']-Delta_E)**2)
selection_teta13=((data['E1']**2+data['E3']**2+2*data['E1']*data['E3']*np.cos(teta13))<(data['E2']+Delta_E)**2) & ((data['E1']**2+data['E3']**2+2*data['E1']*data['E3']*np.cos(teta13))>(data['E2']-Delta_E)**2)
selection_teta23=((data['E2']**2+data['E3']**2+2*data['E2']*data['E3']*np.cos(teta23))<(data['E1']+Delta_E)**2) & ((data['E2']**2+data['E3']**2+2*data['E2']*data['E3']*np.cos(teta23))>(data['E1']-Delta_E)**2)
         
selection_E4=(data['E4']<(1275+Delta_E4))&(data['E4']>(1275-Delta_E4))


ORTHO=data.loc[selection_1&selection_2&selection_Etot&selection_teta12&selection_teta13&selection_teta23,:]
print(ORTHO)


plt.figure(2,figsize=(10,8))
plt.hist(ORTHO['E1'],bins=15,alpha=0.5,label=Title[0])
plt.hist(ORTHO['E2'],bins=15,alpha=0.5,label=Title[1])
plt.hist(ORTHO['E3'],bins=15,alpha=0.5,label=Title[2])

plt.legend(bbox_to_anchor=(0.987, 0.982), loc=1, borderaxespad=0.)
plt.title('Histograms for each channels \n (382 events)',fontsize=17)
plt.xlabel('keV',fontsize=17)
plt.ylabel('Count of photons',fontsize=17)

plt.savefig('Selected_hist_Ortho_Ps_close')
Chan=['E1','E2','E3']
output_parameters=[]

###Computation of the acquisition time
Delta_t1=max(data['t1'])-min(data['t1'])
Delta_t2=max(data['t2'])-min(data['t2'])
Delta_t3=max(data['t3'])-min(data['t3'])

acq_t=max([Delta_t1,Delta_t2,Delta_t3])

for k,el in enumerate(Chan):
     
    hist,bins = np.histogram(ORTHO[el], 20)
    binc = 0.5*(bins[:-1]+bins[1:])
    err_hist=np.sqrt(hist)

    binc = np.delete(binc, np.where(hist == 0))
    err_hist=np.delete(err_hist,np.where(hist == 0))
    hist = np.delete(hist, np.where(hist == 0))
    plt.figure(4*k,figsize=(10,8))
    plt.errorbar(binc, hist, err_hist,fmt='.', color='lightblue',ecolor='lightgray', elinewidth=2, capsize=0)

    par, par_var = curve_fit(gaussian_func, binc, hist,p0=[np.max(hist), binc[np.where(hist==max(hist))][0],binc[np.where(hist==max(hist))][0]*0.1,1,1],sigma=err_hist,absolute_sigma=True)

    plt.plot(np.linspace(min(binc),max(binc),200),gaussian_func(np.linspace(min(binc),max(binc),200),par[0],par[1],par[2],par[3],par[4]),label=' '+el+'\n $\mu$ ='+str(round(par[1],2))+'$\pm$'+str(round(np.sqrt(np.diag(par_var)[1]),2))+
             '\n $\sigma$ ='+str(abs(round(par[2],2)))+'$\pm$'+str(round(np.sqrt(np.diag(par_var)[2]),2))+'\n'+r'$\frac{\chi^2}{Dof}$='+str(chi2red(hist,binc,err_hist,*par)))
    plt.legend(bbox_to_anchor=(0.987, 0.982), loc=1, borderaxespad=0.)
    plt.title('Ortho-Ps coincidence (120Â°) \n (D=8cm , $T_{acq}$='+str(round(acq_t*10**-9/60,2))+'min)',fontsize=17)
    plt.xlabel('keV',fontsize=17)
    plt.ylabel('Count of events',fontsize=17)
    plt.savefig('Ortho_Ps_close_{}'.format(el))
    
    ###Integrals of the pics
    def gaussian_int(x):
        return par[0] * np.exp( - (x - par[1])**2 / (2 * par[2]**2))
    
    integral=quad(gaussian_int,par[1]-5*abs(par[2]),par[1]+5*abs(par[2]))
    
    for i in range(len(par)):
        output_parameters.append(par[i])
        output_parameters.append(np.sqrt(np.diag(par_var)[i]))
    output_parameters.append(integral[0])   

output_parameters=np.array(output_parameters)
output_parameters=np.reshape(output_parameters,(3,11))      
  
print(output_parameters)



df=pd.DataFrame(output_parameters,columns=['A','A_err','mu','mu_err','sigma','sigma_err','a','a_err','b','b_err','Integral(5sigma)'])
df_channel=pd.DataFrame(Channel,columns=['Channel'])
df=pd.concat([df,df_channel],axis=1,join='inner')



df_acq_t=pd.DataFrame(np.reshape([acq_t,acq_t,acq_t],(3,1)),columns=['acq time (ns)']) ##creating a DF fror the acq time
df=pd.concat([df,df_acq_t],axis=1,join='inner')

rate1=np.array(df['Integral(5sigma)'])[0]/(np.array(df['acq time (ns)'])[0]*10**-9)
rate2=np.array(df['Integral(5sigma)'])[1]/(np.array(df['acq time (ns)'])[0]*10**-9)
rate3=np.array(df['Integral(5sigma)'])[2]/(np.array(df['acq time (ns)'])[0]*10**-9)

print("rate1 in s^-1=",rate1)
print("rate2 in s^-1=",rate2)
print("rate3 in s^-1=",rate3)

df_rate=pd.DataFrame(np.reshape([rate1,rate2,rate3],(3,1)),columns=['rates s-1'])


df=pd.concat([df,df_rate],axis=1,join='inner')
print(df)
df.to_csv('Parameters_Ortho_120_close.txt', sep = ';',index = False,na_rep = '')
    
